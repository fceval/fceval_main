# This file is part of SymCC.
#
# SymCC is free software: you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# SymCC is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# SymCC. If not, see <https://www.gnu.org/licenses/>.

#
# The build stage
#
FROM ubuntu:20.04

#ARG APT=mirrors.aliyun.com
# WORKDIR  /work

ENV  CC=clang CXX=clang++  

# Install dependencies
RUN (sed -i "s/security.ubuntu.com/mirrors.aliyun.com/g" /etc/apt/sources.list && sed -i "s/archive.ubuntu.com/mirrors.aliyun.com/g" /etc/apt/sources.list)  &&\ 
    apt-get update \
    && DEBIAN_FRONTEND=noninteractive apt-get install -y \
        cargo \
        clang-10 \
        cmake \
        g++ \
        git \
        libz3-dev \
        llvm-10-dev \
        llvm-10-tools \
        ninja-build \
        python2 \
        python3-pip \
        zlib1g-dev \
        build-essential \
        python2.7-dev \
        sudo \
        gcc libc++-dev libevent-dev ncurses-dev build-essential bison wget ninja-build flex bison python zlib1g-dev cargo zip pkg-config \
    && rm -rf /var/lib/apt/lists/* \
    && pip3 install lit \
    && if [ -e "/usr/bin/clang" ]; then	\
	rm /usr/bin/clang \
    ;fi \
    && if [ -e "/usr/bin/clang++" ]; then	\
	rm /usr/bin/clang++ \
    ;fi \
    && if [ -e "/usr/bin/llvm-config" ]; then \
	rm /usr/bin/llvm-config \
    ;fi \
    && ln -s /usr/bin/clang-10 /usr/bin/clang && ln -s /usr/bin/clang++-10 /usr/bin/clang++ && ln -s /usr/bin/llvm-config-10 /usr/bin/llvm-config \
    && mkdir /targets

    

# Build AFL.

WORKDIR /work
#zhaoxy modify from llvmorg-10.0.1 to llvmorg-12.0.1
COPY --from=fuzzer-system  /work /work
RUN tar xfv afl-2.56b.tar.gz && mv AFL-2.56b afl && cd afl &&  make -j`nproc` && ./afl-clang --version && make install
## Use afl_driver.cpp from LLVM as our fuzzing library.
#RUN wget https://raw.githubusercontent.com/llvm/llvm-project/5feb80e748924606531ba28c97fe65145c65372e/compiler-rt/lib/fuzzer/afl/afl_driver.cpp -O /work/afl/afl_driver.cpp && \
#    clang -Wno-pointer-sign -c /work/afl/llvm_mode/afl-llvm-rt.o.c -I/work/afl && \
#    clang++ -stdlib=libc++ -std=c++11 -O2 -c /work/afl/afl_driver.cpp && \
#    ar r /libAFL.a *.o
RUN wget https://github.com/llvm/llvm-project/releases/download/llvmorg-12.0.1/compiler-rt-12.0.1.src.tar.xz && tar xfv compiler-rt-12.0.1.src.tar.xz    

WORKDIR /work/afldriver    
RUN clang -Wno-pointer-sign -c /work/afl/llvm_mode/afl-llvm-rt.o.c -I/work/afl && \
    clang++ -stdlib=libc++ -std=c++11 -O2 -c /work/compiler-rt-12.0.1.src/lib/fuzzer/afl/afl_driver.cpp && \
    ar r /libAFL.a *.o
# Install Z3 from binary
RUN wget -qO /tmp/z3x64.zip https://github.com/Z3Prover/z3/releases/download/z3-4.8.7/z3-4.8.7-x64-ubuntu-16.04.zip && \
     unzip -o -jd /usr/include /tmp/z3x64.zip "*/include/*.h" && \
     unzip -o -jd /usr/lib /tmp/z3x64.zip "*/bin/libz3.so" && \
     rm -f /tmp/*.zip && \
     ldconfig
WORKDIR /work

ENV CFLAGS=""
ENV CXXFLAGS=""

ENV PATH="/root/.cargo/bin:${PATH}"
RUN curl --proto '=https' --tlsv1.2 -sSf --output /tmp/rustup-init \
        https://sh.rustup.rs && \
    chmod +x /tmp/rustup-init && \
    /tmp/rustup-init -y

# Get and install symcc.
RUN  cd / && \
    git clone https://github.com/AdaLogics/adacc symcc && \
    cd symcc && \
    git checkout edda79dcb830c95ba6d303e47c698839313ef506 && \
    cd ./runtime/qsym_backend && \
    git clone https://github.com/adalogics/qsym && \
    cd qsym && \
    git checkout adalogics && \
    cd /symcc && \
    mkdir build && \
    cd build && \
    cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DQSYM_BACKEND=ON \
          -DZ3_TRUST_SYSTEM_VERSION=ON ../ && \
    ninja -j 3 && \
    cd ../examples && \
    export SYMCC_PC=1 && \
    ../build/symcc -c ./libfuzz-harness-proxy.c -o /libfuzzer-harness.o && \
    cd ../ && echo "[+] Installing cargo now 4" && \
    cargo install --path util/symcc_fuzzing_helper && mkdir -p /rust/bin && cp /root/.cargo/bin/symcc_fuzzing_helper /rust/bin/symcc_fuzzing_helper

# Build libcxx with the SymCC compiler so we can instrument 
# C++ code.
#llvmorg-12.0.1
#COPY llvm-project /llvm_source
RUN git clone -b llvmorg-12.0.1 --depth 1 https://github.com/llvm/llvm-project.git /llvm_source  && \
    mkdir /libcxx_native_install && mkdir /libcxx_native_build && \
    cd /libcxx_native_install \
    && export SYMCC_REGULAR_LIBCXX="" && \
    cmake /llvm_source/llvm                                     \
      -G Ninja  -DLLVM_ENABLE_PROJECTS="libcxx;libcxxabi"       \
      -DLLVM_DISTRIBUTION_COMPONENTS="cxx;cxxabi;cxx-headers"   \
      -DLLVM_TARGETS_TO_BUILD="X86" -DCMAKE_BUILD_TYPE=Release  \
      -DCMAKE_C_COMPILER=/symcc/build/symcc                     \
      -DCMAKE_CXX_COMPILER=/symcc/build/sym++                   \
      -DHAVE_POSIX_REGEX=1     \
      -DCMAKE_INSTALL_PREFIX="/libcxx_native_build" \
      -DHAVE_STEADY_CLOCK=1 && \
    ninja distribution && \
    ninja install-distribution 


WORKDIR /work

#RUN if [ -e "/usr/bin/clang" ]; then	\
#	rm /usr/bin/clang \
#    ;fi \
#&& if [ -e "/usr/bin/clang++" ]; then	\
#	rm /usr/bin/clang++ \
#    ;fi \
#&& if [ -e "/usr/bin/llvm-config" ]; then \
#	rm /usr/bin/llvm-config \
#    ;fi \
#&& ln -s /usr/bin/clang-10 /usr/bin/clang && ln -s /usr/bin/clang++-10 /usr/bin/clang++ && ln -s /usr/bin/llvm-config-10 /usr/bin/llvm-config && mkdir /tmp/output

RUN git clone https://github.com/tmux/tmux.git && cd tmux && sh autogen.sh && ./configure && make && make install && apt-get update && apt-get install -y texinfo


    
 

